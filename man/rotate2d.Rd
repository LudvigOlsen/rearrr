% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rotate2d.R
\name{rotate2d}
\alias{rotate2d}
\title{Rotate the values around an origin}
\usage{
rotate2d(
  data,
  degrees,
  x_col = NULL,
  y_col = NULL,
  suffix = "_rotated",
  origin = c(0, 0),
  origin_fn = NULL,
  keep_original = TRUE,
  degree_col_name = ".degrees"
)
}
\arguments{
\item{data}{\code{data.frame} or \code{vector}.}

\item{degrees}{Degrees to rotate values counterclockwise. In \code{[-360, 360]}.
Can be a vector with multiple degrees.}

\item{x_col}{Name of x column in \code{`data`}. If \code{NULL} and \code{`data`} is a \code{vector},
the index of \code{`data`} is used. If \code{`data`} is a \code{data.frame}, it must be specified.}

\item{y_col}{Name of y column in \code{`data`}. If \code{`data`} is a \code{data.frame}, it must be specified.}

\item{suffix}{Suffix to add to the names of the generated columns.

Use an empty string (i.e. \code{""}) to overwrite the original columns.}

\item{origin}{Coordinates of the origin to rotate around. Must be a vector with 2 elements (orig_x, orig_y).
Ignored when \code{`origin_fn`} is not \code{NULL}.}

\item{origin_fn}{Function for finding the origin coordinates to rotate the values around.
Should have \code{2} input arguments (a vector with x-values, a vector with y-values) and
return a vector with exactly \code{2} elements (orig_x, orig_y).}

\item{keep_original}{Whether to keep the original columns. (Logical)

Some columns may have been overwritten, in which case only the newest version is returned.}

\item{degree_col_name}{Name of new column with the degrees. If \code{NULL}, no column is added.}
}
\value{
\code{data.frame} (\code{tibble}) with three new columns containing the rotated x- and y-values and the degrees.
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

The values are rotated counterclockwise around a specified origin.

The origin can be supplied as coordinates or as a function that returns coordinates. The
latter can be useful when supplying a grouped data frame and rotating around e.g. the centroid
of each group.
}
\details{
Applies the following rotation matrix:\tabular{ll}{
   [ \eqn{cos \theta} \tab , \eqn{ -sin \theta} ] \cr
   [ \eqn{sin \theta} \tab , \eqn{ cos \theta}  ] \cr
}


That is:

\eqn{x' = x cos \theta - y sin \theta}

\eqn{y' = x sin \theta + y cos \theta}

Where \eqn{\theta} is the angle in radians.

As specified at \href{https://en.wikipedia.org/wiki/Rotation_matrix}{Wikipedia/Rotation_matrix}.
}
\examples{
\donttest{
# Attach packages
library(rearrr)
library(dplyr)
library(ggplot2)

# Set seed
set.seed(1)

# Create a data frame
df <- data.frame(
  "Index" = 1:12,
  "A" = c(
    1, 2, 3, 4, 9, 10,
    11, 12, 15, 16, 17, 18
  ),
  "G" = c(1, 1, 1, 1, 2, 2,
          2, 2, 3, 3, 3, 3)
)

# Rotate values
rotate2d(df, 45, x_col="Index", y_col="A")

# Rotate A around the centroid
df_rotated <- df \%>\%
  rotate2d(x_col = "Index",
           y_col = "A",
           degrees = c(0, 120, 240),
           origin_fn = centroid)
df_rotated

# Plot A and A rotated around overall centroid
ggplot(df_rotated, aes(x = Index_rotated, y = A_rotated, color = factor(.degrees))) +
  geom_hline(yintercept = mean(df$A), size = 0.2, alpha = .4, linetype="dashed") +
  geom_vline(xintercept = mean(df$Index), size = 0.2, alpha = .4, linetype="dashed") +
  geom_line(alpha = .4) +
  geom_point() +
  theme_minimal() +
  labs(x = "Index", y="Value", color="Degrees")

# Rotate around group centroids
df_grouped <- df \%>\%
  dplyr::group_by(G) \%>\%
  rotate2d(x_col = "Index",
           y_col = "A",
           degrees = c(0, 120, 240),
           origin_fn = centroid)
df_grouped

# Plot A and A rotated around group centroids
ggplot(df_grouped, aes(x=Index_rotated, y=A_rotated, color = factor(.degrees))) +
  geom_point() +
  theme_minimal() +
  labs(x = "Index", y="Value", color="Degrees")

}
}
\seealso{
Other mutate functions: 
\code{\link{cluster_groups}()},
\code{\link{expand_values}()},
\code{\link{flip_values}()}
}
\author{
Ludvig Renbo Olsen, \email{r-pkgs@ludvigolsen.dk}
}
\concept{mutate functions}
