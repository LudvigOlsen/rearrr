% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expand.R
\name{expand}
\alias{expand}
\title{Expand the values around an origin}
\usage{
expand(
  data,
  cols = NULL,
  multipliers = 1,
  multipliers_fn = NULL,
  origin = 0,
  origin_fn = NULL,
  exponentiate = FALSE,
  add_one_exp = TRUE,
  suffix = "_expanded",
  keep_original = TRUE,
  mult_col_name = ifelse(isTRUE(exponentiate), ".exponent", ".multipliers"),
  origin_col_name = ".origin"
)
}
\arguments{
\item{data}{\code{data.frame} or \code{vector}.}

\item{cols}{Names of columns in \code{data} to expand. Each column is considered a dimension to expand in.}

\item{multipliers}{Constant(s) to multiply/exponentiate the distance to the origin by.}

\item{origin}{Coordinates of the origin to expand around.
Must be either a single constant to use in all dimensions or a vector with one constant per dimension.

\strong{N.B.} Ignored when \code{origin_fn} is not \code{NULL}.}

\item{origin_fn}{Function for finding the origin coordinates to expand the values around.
Each column will be passed as a vector in the order of \code{`cols`}. It should return either a single constant to be used in
all dimensions or a vector with one constant per dimension.

Can be created with \code{\link[rearrr:create_origin_fn]{create_origin_fn()}} if you want to apply
the same function to each dimension.

E.g. the \code{\link[rearrr:centroid]{centroid()}}, which is created with:

\code{create_origin_fn(mean)}

Which returns the following function:

\code{function(...)\{}

\verb{  }\code{list(...) \%>\%}

\verb{    }\code{purrr::map(mean) \%>\%}

\verb{    }\code{unlist(recursive = TRUE,}

\verb{           }\code{use.names = FALSE)}

\code{\}}}

\item{exponentiate}{Whether to exponentiate instead of multiplying.}

\item{add_one_exp}{Whether to add 1/-1 before exponentiating to ensure the values don't contract.
The added value is subtracted after the exponentiation.

Added with:
\code{x <- x + sign(x)} ; \code{y <- y + sign(y)}.

Ignored when \code{exponentiate} is \code{FALSE}.}

\item{suffix}{Suffix to add to the names of the generated columns.}

\item{mult_col_name}{Name of new column with the multiplier.}

\item{origin_col_name}{Name of new column with the origin coordinates.}

\item{multiplier_fn}{Function}
}
\value{
Data frame with three new columns containing the rotated x- and y-values and the degrees.
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

The values are expanded such that the distance to the specified origin is increased in all dimensions.

The origin can be supplied as coordinates or as a function that returns coordinates. The
latter can be useful when supplying a grouped data frame and expanding around e.g. the centroid
of each group.

The multipliers/exponents can can supplied as constant(s) or as a function that returns constant(s).
The latter can be useful when supplying a grouped data frame and the multiplier/exponent depends
on the data in the groups.
If supplying multiple constants, there must be one per dimension (length of \code{cols}).
}
\details{
TODO
}
\examples{
\donttest{
# Attach packages
library(rearrr)
library(dplyr)
library(ggplot2)

# Set seed
set.seed(1)

# Create a data frame
df <- data.frame(
  "x" = runif(20),
  "y" = runif(20),
  "g" = c(1, 1, 1, 1, 1,
          2, 2, 2, 2, 2,
          3, 3, 3, 3, 3,
          4, 4, 4, 4, 4)
)


# Expand values
expand2d(df, multiplier = 1.2, x_col="x", y_col="y")

# Expand x and y around the centroid
# We use exponentiation for a more drastic effect
# The add_one_exp makes sure it expands even
# when x or y is in the range [>-1, <1]
df_expanded <- df \%>\%
  expand2d(x_col = "x",
           y_col = "y",
           multiplier = c(1, 2.0, 3.0, 4.0),
           origin_fn = centroid,
           exponentiate = TRUE,
           add_one_exp = TRUE)
df_expanded

# Plot the expansions of x and y around the overall centroid
ggplot(df_expanded, aes(x = x_expanded, y = y_expanded, color = factor(.exponent))) +
  geom_vline(xintercept = df_expanded[[".origin"]][[1]][[1]],
             size = 0.2, alpha = .4, linetype="dashed") +
  geom_hline(yintercept = df_expanded[[".origin"]][[1]][[2]],
             size = 0.2, alpha = .4, linetype="dashed") +
  geom_point() +
  theme_minimal() +
  labs(x = "x", y="y", color="Exponent")

# Expand x and y around the centroid using multiplication
df_expanded <- df \%>\%
  expand2d(x_col = "x",
           y_col = "y",
           multiplier = c(1, 1.5, 2.0, 2.5),
           origin_fn = centroid,
           exponentiate = FALSE)
df_expanded

# Plot the expansions of x and y around the overall centroid
ggplot(df_expanded, aes(x = x_expanded, y = y_expanded, color = factor(.multiplier))) +
  geom_vline(xintercept = df_expanded[[".origin"]][[1]][[1]],
             size = 0.2, alpha = .4, linetype="dashed") +
  geom_hline(yintercept = df_expanded[[".origin"]][[1]][[2]],
             size = 0.2, alpha = .4, linetype="dashed") +
  geom_point() +
  theme_minimal() +
  labs(x = "x", y="y", color="Multiplier")

}
}
\seealso{
Other mutate functions: 
\code{\link{expand2d}()},
\code{\link{flip_values}()},
\code{\link{rotate2d}()}
}
\author{
Ludvig Renbo Olsen, \email{r-pkgs@ludvigolsen.dk}
}
\concept{mutate functions}
