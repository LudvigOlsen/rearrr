% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/swirl.R
\name{swirl2d}
\alias{swirl2d}
\title{Rotate the values around an origin in 2 dimensions}
\usage{
swirl2d(
  data,
  radius,
  x_col = NULL,
  y_col = NULL,
  suffix = "_swirled",
  origin = c(0, 0),
  origin_fn = NULL,
  scale_fn = identity,
  keep_original = TRUE,
  degree_col_name = ".degrees",
  radius_col_name = ".radius",
  origin_col_name = ".origin"
)
}
\arguments{
\item{data}{\code{data.frame} or \code{vector}.}

\item{x_col}{Name of x column in \code{`data`}. If \code{NULL} and \code{`data`} is a \code{vector},
the index of \code{`data`} is used. If \code{`data`} is a \code{data.frame}, it must be specified.}

\item{y_col}{Name of y column in \code{`data`}. If \code{`data`} is a \code{data.frame}, it must be specified.}

\item{suffix}{Suffix to add to the names of the generated columns.

Use an empty string (i.e. \code{""}) to overwrite the original columns.}

\item{origin}{Coordinates of the origin to rotate around. Must be a \code{vector} with 2 elements (orig_x, orig_y).
Ignored when \code{`origin_fn`} is not \code{NULL}.}

\item{origin_fn}{Function for finding the origin coordinates to rotate the values around.
Each column will be passed as a \code{vector} (i.e. a \code{vector} with x-values and
a \code{vector} with y-values).
It should return a \code{vector} with one constant per dimension (i.e. origin_x, origin_y).

Can be created with \code{\link[rearrr:create_origin_fn]{create_origin_fn()}} if you want to apply
the same function to each dimension.

E.g. the \code{\link[rearrr:centroid]{centroid()}} function, which is created with:

\code{create_origin_fn(mean)}

Which returns the following function:

\code{function(...)\{}

\verb{  }\code{list(...) \%>\%}

\verb{    }\code{purrr::map(mean) \%>\%}

\verb{    }\code{unlist(recursive = TRUE,}

\verb{           }\code{use.names = FALSE)}

\code{\}}}

\item{keep_original}{Whether to keep the original columns. (Logical)

Some columns may have been overwritten, in which case only the newest versions are returned.}

\item{degree_col_name}{Name of new column with the degrees. If \code{NULL}, no column is added.}

\item{degrees}{Degrees to rotate values counterclockwise. In \code{[-360, 360]}.
Can be a \code{vector} with multiple degrees.}
}
\value{
\code{data.frame} (\code{tibble}) with three new columns containing the rotated x- and y-values and the degrees.
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

The values are rotated counterclockwise around a specified origin.

The origin can be supplied as coordinates or as a function that returns coordinates. The
latter can be useful when supplying a grouped data frame and rotating around e.g. the centroid
of each group.
}
\details{
Applies the following rotation matrix:\tabular{lll}{
   [ \eqn{cos \theta} \tab , \eqn{ -sin \theta} \tab ] \cr
   [ \eqn{sin \theta} \tab , \eqn{ cos \theta} \tab ] \cr
}


That is:

\eqn{x' = x cos \theta - y sin \theta}

\eqn{y' = x sin \theta + y cos \theta}

Where \eqn{\theta} is the angle in radians.

As specified at \href{https://en.wikipedia.org/wiki/Rotation_matrix}{Wikipedia/Rotation_matrix}.
}
\examples{
\donttest{
# Attach packages
library(rearrr)
library(dplyr)
library(ggplot2)

# Set seed
set.seed(1)

# Create a data frame
df <- data.frame(
  "x" = 1:50,
  "y" = 1,
  "g" = rep(1:5, each=10)
)

# Rotate values
swirl2d(df, radius = 45, x_col = "x", y_col = "y")

# Swirl around the centroid
df_swirled <- swirl2d(
  data = df,
  radius = c(95, 96, 97, 98, 99, 100),
  x_col = "x",
  y_col = "y",
  origin_fn = centroid,
  scale_fn = function(x) {
    x ^ 1.6
  }
)

df_swirled

# Plot swirls
df_swirled \%>\%
  ggplot(aes(x=x_rotated, y=y_rotated, color = factor(.radius))) +
  geom_point() +
  theme_minimal() +
  labs(x = "x", y = "y", color = ".radius")


# Rotate around group centroids
df_grouped <- df \%>\%
  dplyr::group_by(G) \%>\%
  swirl2d(
    data = df,
    radius = c(95, 96, 97, 98, 99, 100),
    x_col = "x",
    y_col = "y",
    origin_fn = centroid,
    scale_fn = function(x) {
      x ^ 1.6
    })

df_grouped

# Plot group swirls
df_grouped \%>\%
  ggplot(aes(x=x_rotated, y=y_rotated, color = factor(.radius))) +
  geom_point() +
  theme_minimal() +
  labs(x = "x", y = "y", color = ".radius")

}
}
\seealso{
Other mutate functions: 
\code{\link{cluster_groups}()},
\code{\link{dim_values}()},
\code{\link{expand_values}()},
\code{\link{flip_values}()},
\code{\link{rotate2d}()},
\code{\link{rotate3d}()}
}
\author{
Ludvig Renbo Olsen, \email{r-pkgs@ludvigolsen.dk}
}
\concept{mutate functions}
