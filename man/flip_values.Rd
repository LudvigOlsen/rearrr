% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flip_values.R
\name{flip_values}
\alias{flip_values}
\title{Flip the values around a center value}
\usage{
flip_values(
  data,
  cols = NULL,
  center = 0,
  center_fn = create_origin_fn(median),
  suffix = "_flipped",
  keep_original = TRUE,
  center_col_name = ".center"
)
}
\arguments{
\item{data}{\code{data.frame} or \code{vector}.}

\item{cols}{Names of columns in \code{`data`} to flip values of.}

\item{center}{Coordinates of the center to flip around.
Must be either a single constant to use in all dimensions (columns)
or a vector with one constant per dimension.

\strong{N.B.} Ignored when \code{`center_fn`} is not \code{NULL}.}

\item{center_fn}{Function for finding the center value to flip the values around.
Each column will be passed as a vector in the order of \code{`cols`}.
It should return a vector with one constant per dimension.

Can be created with \code{\link[rearrr:create_origin_fn]{create_origin_fn()}} if you want to apply
the same function to each dimension.

E.g. the \code{\link[rearrr:centroid]{centroid()}} function, which is created with:

\code{create_origin_fn(mean)}

Which returns the following function:

\code{function(...)\{}

\verb{  }\code{list(...) \%>\%}

\verb{    }\code{purrr::map(mean) \%>\%}

\verb{    }\code{unlist(recursive = TRUE,}

\verb{           }\code{use.names = FALSE)}

\code{\}}}

\item{suffix}{Suffix to add to the names of the generated columns.

Use an empty string (i.e. \code{""}) to overwrite the original columns.}

\item{keep_original}{Whether to keep the original columns. (Logical)

Some columns may have been overwritten, in which case only the newest version is returned.}

\item{center_col_name}{Name of new column with the center coordinates. If \code{NULL}, no column is added.}
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

The values are flipped with the formula \code{x = 2 * c - x} where \code{x} is the value and \code{c} is
the center value to flip the values around.

The center can be supplied as coordinates or as a function that returns coordinates. The
latter can be useful when supplying a grouped data frame and flipping around e.g. the centroid
of each group.

\strong{Example}:

The column values:

\code{c(5, 2, 7, 4, 3, 1)}

and the \code{center_fn = create_origin_fn(median)}

Changes the values to :

\code{c(2, 5, 0, 3, 4, 6)}
}
\examples{
\donttest{
# Attach packages
library(rearrr)
library(dplyr)
library(ggplot2)

# Set seed
set.seed(1)

# Create a data frame
df <- data.frame(
  "Index" = 1:10,
  "A" = sample(1:10),
  "B" = runif(10),
  "G" = c(1, 1, 1, 2, 2,
          2, 3, 3, 3, 3),
  stringsAsFactors = FALSE
)

# Flip values of the columns
flip_values(df$A)
flip_values(df, cols = "A")
flip_values(df, cols = "B", center = 0.3, keep_original = FALSE)
flip_values(df, cols = c("A", "B"), center = c(3, 0.3),
            suffix = "",  keep_original = FALSE)
flip_values(df, cols = c("A", "B"), center_fn = create_origin_fn(max))

# Grouped by G
df \%>\%
  dplyr::group_by(G) \%>\%
  flip_values(cols = c("A", "B"),
              center_fn = create_origin_fn(median),
              keep_original = FALSE)

# Plot A and flipped A

# First flip A around the median and then around the value 3.
df <- df \%>\%
  flip_values(cols = "A", suffix = "_flip_median", center_col_name = NULL) \%>\%
  flip_values(cols = "A", suffix = "_flip_3", center = 3, center_col_name = NULL)

# Plot A and A flipped around its median
ggplot(df, aes(x=Index, y=A)) +
  geom_line(aes(color="A")) +
  geom_line(aes(y=A_flip_median, color="Flipped A (median)")) +
  geom_hline(aes(color="Median A", yintercept = median(A))) +
  theme_minimal()

# Plot A and A flipped around the value 3
ggplot(df, aes(x=Index, y=A)) +
  geom_line(aes(color="A")) +
  geom_line(aes(y=A_flip_3, color="Flipped A (3)")) +
  geom_hline(aes(color="3", yintercept = 3)) +
  theme_minimal()
}
}
\seealso{
Other mutate functions: 
\code{\link{cluster_groups}()},
\code{\link{expand_values}()},
\code{\link{rotate2d}()}
}
\author{
Ludvig Renbo Olsen, \email{r-pkgs@ludvigolsen.dk}
}
\concept{mutate functions}
